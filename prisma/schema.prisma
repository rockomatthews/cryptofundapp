// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  donations     Donation[]
  wallets       Wallet[]
  PaymentRecord PaymentRecord[]
  profile       UserProfile?
}

model UserProfile {
  id        String   @id @default(cuid())
  bio       String?  @db.Text
  location  String?
  website   String?
  twitter   String?
  github    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific Models
model Campaign {
  id                   String               @id @default(cuid())
  title                String
  description          String               @db.Text
  goal                 Float
  raised               Float                @default(0)
  image                String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  endDate              DateTime?
  isActive             Boolean              @default(true)
  category             String?
  targetCurrency       String               @default("USD")
  creatorWalletAddress String?
  userId               String
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  donations            Donation[]
  updates              CampaignUpdate[]
  payouts              CampaignPayout[]
  currencyConversions  CurrencyConversion[]
}

model Donation {
  id                  String               @id @default(cuid())
  amount              Float
  currency            String               @default("USD")
  cryptoType          String?
  walletId            String?
  wallet              Wallet?              @relation(fields: [walletId], references: [id])
  message             String?              @db.Text
  isAnonymous         Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId          String
  campaign            Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  transactionHash     String?              @unique
  status              String               @default("pending") // pending, completed, failed
  paymentAddress      String?
  paymentId           String?
  refunded            Boolean              @default(false)
  usdEquivalent       Float? // USD equivalent at time of donation
  currencyConversions CurrencyConversion[]
}

model Wallet {
  id         String     @id @default(cuid())
  walletType String // ETH, BTC, etc.
  address    String
  provider   String // MetaMask, Coinbase, etc.
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  donations  Donation[]

  @@unique([userId, walletType])
}

model CampaignUpdate {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignPayout {
  id            String   @id @default(cuid())
  campaignId    String
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String
  walletAddress String
  transactionId String
  status        String   @default("processing")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CurrencyConversion {
  id                      String    @id @default(cuid())
  donationId              String
  donation                Donation  @relation(fields: [donationId], references: [id], onDelete: Cascade)
  campaignId              String
  campaign                Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  fromCurrency            String
  toCurrency              String
  fromAmount              Float
  toAmount                Float?
  exchangeId              String
  status                  String    @default("processing") // processing, completed, failed
  estimatedCompletionTime DateTime?
  completedAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// For tracking payments like campaign creation fees, platform fees, etc.
model PaymentRecord {
  id                 String   @id @default(cuid())
  paymentId          String   @unique // From payment processor
  amount             Float
  currency           String
  status             String // completed, failed, pending
  type               String // campaign_creation_fee, platform_fee, etc.
  transactionHash    String? // Blockchain transaction hash
  destinationAddress String // Wallet address receiving the payment
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata           String?  @db.Text // JSON string with additional data
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
