import * as anchor from '@project-serum/anchor';
import { Connection, PublicKey } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { Buffer } from 'buffer';

// This would be the actual IDL generated from the Solana program
// For now, we're using a placeholder
const programIDL = {
  // IDL would be generated by Anchor when you build the program
};

// Program ID should match the ID in our smart contract
const PROGRAM_ID = new PublicKey('8tPzm9ZtpPURBFGNXzFGJAPe2Q7JFMRu9YtEQTywCE2b');

// Helper class to interact with our Solana program
export class CampaignClient {
  private program: anchor.Program;
  private connection: Connection;

  constructor(connection: Connection, wallet: anchor.Wallet) {
    this.connection = connection;

    // Set up Anchor provider
    const provider = new anchor.AnchorProvider(
      connection,
      wallet,
      { preflightCommitment: 'confirmed' }
    );

    // Create program interface
    this.program = new anchor.Program(programIDL as anchor.Idl, PROGRAM_ID, provider);
  }

  // Create a new campaign
  async createCampaign(
    name: string,
    description: string,
    goalAmountUsd: number, // in cents
    durationDays: number,
    targetCurrency: PublicKey
  ) {
    const creator = this.program.provider.wallet.publicKey;
    
    // Calculate deadline timestamp
    const now = Math.floor(Date.now() / 1000);
    const deadline = now + (durationDays * 24 * 60 * 60);
    
    // Derive campaign PDA
    const [campaignPDA] = await PublicKey.findProgramAddress(
      [
        Buffer.from('campaign'),
        creator.toBuffer(),
        Buffer.from(name),
      ],
      this.program.programId
    );
    
    try {
      // Call the program to create the campaign
      const tx = await this.program.methods
        .createCampaign(
          name,
          description,
          new anchor.BN(goalAmountUsd),
          new anchor.BN(deadline),
          targetCurrency
        )
        .accounts({
          creator,
          campaign: campaignPDA,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .rpc();
      
      return {
        success: true,
        campaignAddress: campaignPDA.toString(),
        transactionId: tx
      };
    } catch (error: any) {
      console.error('Error creating campaign:', error);
      return {
        success: false,
        error: error.message || 'Unknown error occurred'
      };
    }
  }

  // Donate to a campaign
  async donate(
    campaignAddress: string,
    amount: number,
    tokenMint: PublicKey
  ) {
    const donor = this.program.provider.wallet.publicKey;
    const campaign = new PublicKey(campaignAddress);
    
    try {
      // Get campaign data
      const campaignAccount = await this.program.account.campaign.fetch(campaign);
      
      // Find donor token account for the given mint
      const donorTokenAccount = await this.findTokenAccount(donor, tokenMint);
      
      // Find campaign vault PDA
      const [campaignVault] = await PublicKey.findProgramAddress(
        [
          Buffer.from('campaign_vault'),
          campaign.toBuffer(),
          tokenMint.toBuffer(),
        ],
        this.program.programId
      );
      
      // Ensure campaign vault exists (in a real implementation, you might need to create it first)
      
      // Generate a unique seed for this donation based on total raised so far
      const donationSeed = Buffer.from(campaignAccount.totalRaisedUsd.toArray('le', 8));
      
      // Derive donation PDA
      const [donationPDA] = await PublicKey.findProgramAddress(
        [
          Buffer.from('donation'),
          campaign.toBuffer(),
          donor.toBuffer(),
          donationSeed,
        ],
        this.program.programId
      );
      
      // Find price feed for this token (simplified - in reality this would be more complex)
      const priceFeed = new PublicKey('PriceOracle11111111111111111111111111111111');
      
      // Call the program to make the donation
      const tx = await this.program.methods
        .donate(new anchor.BN(amount))
        .accounts({
          donor,
          campaign,
          donation: donationPDA,
          mint: tokenMint,
          donorTokenAccount,
          campaignVault,
          priceFeed,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .rpc();
      
      return {
        success: true,
        transactionId: tx
      };
    } catch (error: any) {
      console.error('Error donating to campaign:', error);
      return {
        success: false,
        error: error.message || 'Unknown error occurred'
      };
    }
  }

  // Get campaign details
  async getCampaign(campaignAddress: string) {
    try {
      const campaign = await this.program.account.campaign.fetch(
        new PublicKey(campaignAddress)
      );
      
      return {
        creator: campaign.creator.toString(),
        name: campaign.name,
        description: campaign.description,
        goalAmountUsd: campaign.goalAmountUsd.toNumber(),
        deadline: campaign.deadline.toNumber(),
        totalRaisedUsd: campaign.totalRaisedUsd.toNumber(),
        targetCurrency: campaign.targetCurrency.toString(),
        isActive: campaign.isActive,
        isSuccessful: campaign.isSuccessful
      };
    } catch (error: any) {
      console.error('Error fetching campaign:', error);
      return null;
    }
  }

  // Helper to find a token account
  private async findTokenAccount(owner: PublicKey, mint: PublicKey) {
    // This is simplified - in a real app you'd handle creating token accounts if they don't exist
    const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(
      owner,
      { mint }
    );
    
    if (tokenAccounts.value.length === 0) {
      throw new Error(`No token account found for mint ${mint.toString()}`);
    }
    
    return tokenAccounts.value[0].pubkey;
  }
}

// Export a function to connect to the Solana program
export async function connectToCampaignProgram(wallet: anchor.Wallet) {
  // Use mainnet instead of devnet
  const connection = new Connection('https://api.mainnet-beta.solana.com', 'confirmed');
  return new CampaignClient(connection, wallet);
} 
